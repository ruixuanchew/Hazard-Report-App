name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: flask-app

jobs:
  # Job 1: Run tests and lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest pytest-cov flake8

      - name: Run linting
        run: |
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        run: |
          mkdir -p app/tests
          cat > app/tests/test_app.py << 'EOF'
          import pytest
          import sys, os
          sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

          def test_app_imports():
              try:
                  from app import app
                  assert app is not None
              except ImportError:
                  pytest.skip("App import test skipped due to missing deps")

          def test_allowed_extensions():
              from app import ALLOWED_EXTENSIONS
              assert 'png' in ALLOWED_EXTENSIONS
              assert 'jpg' in ALLOWED_EXTENSIONS
          EOF
          cd app && python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term || true

  # Job 2: Build Docker image
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -f FlaskApp.Dockerfile -t $IMAGE_NAME:${{ github.sha }} .
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest

  # Job 3: Deploy to EC2
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create .env file locally
        run: |
          cat > .env <<EOF
          # Database
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}

          # Email
          SMTP_SERVER=${{ secrets.SMTP_SERVER }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}
          SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}
          APP_NAME=${{ secrets.APP_NAME }}

          # Graylog
          GRAYLOG_MONGO_PASSWORD=${{ secrets.GRAYLOG_MONGO_PASSWORD }}
          GRAYLOG_PASSWORD_SECRET=${{ secrets.GRAYLOG_PASSWORD_SECRET }}
          GRAYLOG_ROOT_PASSWORD_SHA2=${{ secrets.GRAYLOG_ROOT_PASSWORD_SHA2 }}
          GRAYLOG_HOST=${{ secrets.GRAYLOG_HOST }}
          GRAYLOG_PORT=${{ secrets.GRAYLOG_PORT }}
          EOF

      - name: Transfer .env file to server
        run: |
          scp .env ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/projects/ICT2216-SSD-P2-Group-13/

      - name: Build and deploy on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'ENDSSH'
            cd ~/projects/ICT2216-SSD-P2-Group-13
            
            # Pull latest code
            git pull origin main
            
            # Stop and remove existing containers to avoid conflicts
            echo "Stopping existing containers..."
            docker-compose down || true
            
            # Remove any dangling containers with the same names
            docker rm -f $(docker ps -aq --filter "name=mysql_db") 2>/dev/null || true
            docker rm -f $(docker ps -aq --filter "name=flask") 2>/dev/null || true
            docker rm -f $(docker ps -aq --filter "name=mongo") 2>/dev/null || true
            docker rm -f $(docker ps -aq --filter "name=opensearch") 2>/dev/null || true
            docker rm -f $(docker ps -aq --filter "name=graylog") 2>/dev/null || true
            
            # Build Docker image directly on server
            docker build -f FlaskApp.Dockerfile -t flask-app:latest .
            
            # Deploy with fresh containers
            docker-compose up -d --build
          ENDSSH

      - name: Wait for services to be ready
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'ENDSSH'
            echo "Waiting for MySQL to be ready..."
            for i in {1..30}; do
              if docker exec mysql_db mysqladmin ping -h localhost --silent; then
                echo "MySQL is ready!"
                break
              fi
              echo "Waiting for MySQL... (attempt $i)"
              sleep 10
            done
          ENDSSH

      - name: Seed database
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'ENDSSH'
            cd ~/projects/ICT2216-SSD-P2-Group-13
            
            # Check if database is already initialized
            TABLES_EXIST=$(docker exec mysql_db mysql -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} ${{ secrets.MYSQL_DATABASE }} -e "SHOW TABLES;" 2>/dev/null | wc -l)
            
            if [ "$TABLES_EXIST" -le 1 ]; then
              echo "Database appears to be empty. Seeding database..."
              
              # Check if SQL files exist in the new location and seed them
              if [ -f "sql_import/users.sql" ]; then
                echo "Seeding users.sql..."
                docker exec -i mysql_db mysql -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} ${{ secrets.MYSQL_DATABASE }} < "sql_import/users.sql"
              fi
              
              if [ -f "sql_import/usersV2.sql" ]; then
                echo "Seeding usersV2.sql..."
                docker exec -i mysql_db mysql -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} ${{ secrets.MYSQL_DATABASE }} < "sql_import/usersV2.sql"
              fi
              
              if [ -f "sql_import/notification.sql" ]; then
                echo "Seeding notification.sql..."
                docker exec -i mysql_db mysql -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} ${{ secrets.MYSQL_DATABASE }} < "sql_import/notification.sql"
              fi
              
              if [ -f "sql_import/flask_db_report_tables.sql" ]; then
                echo "Seeding flask_db_report_tables.sql..."
                docker exec -i mysql_db mysql -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} ${{ secrets.MYSQL_DATABASE }} < "sql_import/flask_db_report_tables.sql"
              fi
              
              if [ -f "sql_import/user_preferences.sql" ]; then
                echo "Seeding user_preferences.sql..."
                docker exec -i mysql_db mysql -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} ${{ secrets.MYSQL_DATABASE }} < "sql_import/user_preferences.sql"
              fi
              
              if [ -f "sql_import/admin_preferences.sql" ]; then
                echo "Seeding admin_preferences.sql..."
                docker exec -i mysql_db mysql -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} ${{ secrets.MYSQL_DATABASE }} < "sql_import/admin_preferences.sql"
              fi
              
              # Check for any additional SQL files in the sql_import directory
              if [ -d "sql_import" ]; then
                echo "Checking for additional SQL files in sql_import directory..."
                for sql_file in "sql_import"/*.sql; do
                  if [ -f "$sql_file" ]; then
                    filename=$(basename "$sql_file")
                    case $filename in
                      users.sql|usersV2.sql|notification.sql|flask_db_report_tables.sql|user_preferences.sql|admin_preferences.sql)
                        echo "Already processed $filename"
                        ;;
                      *)
                        echo "Processing additional SQL file: $filename"
                        docker exec -i mysql_db mysql -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} ${{ secrets.MYSQL_DATABASE }} < "$sql_file"
                        ;;
                    esac
                  fi
                done
              fi
              
              echo "Database seeding completed!"
            else
              echo "Database already contains tables. Skipping seeding to preserve existing data."
              echo "Found $TABLES_EXIST tables in the database."
            fi
          ENDSSH

      - name: Health check main site
        run: |
          for i in {1..12}; do
            if curl -sSf https://wesitsecure.zapto.org/; then
              echo "✅ Main site is healthy!"
              break
            fi
            echo "Waiting for main site... (attempt $i)"
            sleep 5
          done

      - name: Health check Graylog
        run: |
          echo "Waiting 20 seconds for Graylog to fully load..."
          sleep 20
          
          for i in {1..6}; do
            if curl -sSf https://wesitsecure.zapto.org/graylog/; then
              echo "✅ Graylog is healthy!"
              break
            fi
            echo "Waiting for Graylog... (attempt $i)"
            sleep 10
          done

      - name: Send notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment to https://wesitsecure.zapto.org/ succeeded"
          else
            echo "❌ Deployment failed!"
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa .env
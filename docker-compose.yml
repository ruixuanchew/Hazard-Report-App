services:
  # MongoDB for Graylog
  mongo:
    image: mongo:5.0
    container_name: graylog_mongo_v2
    restart: unless-stopped
    networks:
      - my_network
    volumes:
      - ./graylog_data/mongo:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: graylog123
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # OpenSearch for Graylog
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: graylog_opensearch
    restart: unless-stopped
    user: "1000:1000"
    environment:
      - cluster.name=graylog-cluster
      - node.name=opensearch-node1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./graylog_data/opensearch:/usr/share/opensearch/data
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Graylog
  graylog:
    image: graylog/graylog:6.3.1
    container_name: graylog_server_v2
    restart: unless-stopped
    environment:
      - GRAYLOG_PASSWORD_SECRET=${GRAYLOG_PASSWORD_SECRET}
      - GRAYLOG_ROOT_PASSWORD_SHA2=${GRAYLOG_ROOT_PASSWORD_SHA2}
      - GRAYLOG_HTTP_EXTERNAL_URI=https://wesitsecure.zapto.org/graylog/
      - GRAYLOG_HTTP_PUBLISH_URI=https://wesitsecure.zapto.org/graylog/
      - GRAYLOG_WEB_ENDPOINT_URI=https://wesitsecure.zapto.org/graylog/api/
      - GRAYLOG_ELASTICSEARCH_HOSTS=http://opensearch:9200  # Fixed: point to opensearch
      - GRAYLOG_MONGODB_URI=mongodb://admin:graylog123@mongo:27017/graylog?authSource=admin
      - GRAYLOG_HTTP_BIND_ADDRESS=0.0.0.0:9000
      - GRAYLOG_REST_LISTEN_URI=http://0.0.0.0:9000/api/
      - GRAYLOG_WEB_LISTEN_URI=http://0.0.0.0:9000/
    networks:
      - my_network
    depends_on:
      mongo:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    ports:
      - 9000:9000
      - 1514:1514
      - 1514:1514/udp
      - 12201:12201
      - 12201:12201/udp
 #   healthcheck:
 #     test: ["CMD-SHELL", "curl -f http://localhost:9000/api/system/lbstatus || exit 1"]
 #     interval: 30s
 #    timeout: 10s
 #     retries: 3
 #     start_period: 120s

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql_db_v2
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: flask_db
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./mysql_data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask Application
  flask:
    build: 
      context: .
      dockerfile: FlaskApp.Dockerfile
    container_name: flask_app_v2
    restart: unless-stopped
    env_file:
      - .env
    expose:
      - 5000
    networks:
      - my_network
    volumes:
      - ./app:/app
    depends_on:
      mysql:
        condition: service_healthy
  #    graylog:
  #     condition: service_healthy

  # Nginx Reverse Proxy
  nginx:
    image: nginx:latest
    container_name: nginx_proxy_v2
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/cert.crt:/etc/nginx/conf.d/cert.crt:ro
      - ./nginx/cert.key:/etc/nginx/conf.d/cert.key:ro
    depends_on:
      - flask
      - graylog
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
    name: graylog_network